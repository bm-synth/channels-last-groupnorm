name: Push Python Package to AWS CodeArtifact using twine

on:
  workflow_call:
    inputs:
      arn-role:
        description: "ARN of the AWS role"
        required: true
        type: string

    outputs:
      package-base-version:
        description: Resulting Python Package version
        value: ${{ jobs.push-python-package.outputs.package-base-version }}
      package-dev-version:
        description: Resulting Python Package version
        value: ${{ jobs.push-python-package.outputs.package-dev-version }}

jobs:
  push-python-package:
    runs-on: [self-hosted, research]
    container:
      # You can put your own team's base image here
      image: 812634467557.dkr.ecr.eu-west-1.amazonaws.com/gha-rnd-runner-python-base:py311-latest

    outputs:
      package-base-version: ${{ steps.resolve-version.outputs.base-version }}
      package-dev-version: ${{ steps.resolve-version.outputs.dev-version }}

    steps:
      - name: Check out repo
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event_name == 'pull_request' && github.head_ref || github.ref }}
          fetch-depth: 0

      - name: Setup Python
        uses: Synthesia-Technologies/gha-workflows/actions/rnd/setup-python@main
        with:
          arn-role: ${{ inputs.arn-role }}

      - name: Compute new version based on semantic versioning
        id: resolve-version
        uses: Synthesia-Technologies/gha-workflows/actions/rnd/resolve-new-version@main
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check version setup in pyproject.toml
        id: check-versioning-system
        run: |
          if grep 'dynamic = \["version"\]' pyproject.toml; then
            echo "Dynamic versioning is set up in pyproject.toml."
            echo "DYNAMIC_VERSIONING=1" >> $GITHUB_ENV
          elif grep -Eo '^version = "[0-9]+\.[0-9]+\.[0-9]+"' pyproject.toml; then
              echo "Static versioning is set up in pyproject.toml."
              echo "DYNAMIC_VERSIONING=0" >> $GITHUB_ENV
          else
              echo "No versioning setup found in pyproject.toml."
          fi

      # If you don't want to push to CA on every PR, remove this step and do also the next comment below
      - name: Bump version to dev version (just for pushing to CA, no commit)
        if: ${{ github.ref == 'refs/heads/main' && env.DYNAMIC_VERSIONING !='1' }}
        uses: Synthesia-Technologies/gha-workflows/actions/rnd/bump-pyproject-version@main
        with:
          commit-file: "false"
          new-version: ${{ steps.resolve-version.outputs.dev-version }}

      - name: Set stable release to one
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          echo "STABLE_RELEASE=1" >> $GITHUB_ENV

      - name: Push Dev Python Package to AWS CA
        id: push-python-package
        # Uncomment this if you don't want to push to CA on every PR
        # if: ${{ github.ref == 'refs/heads/main' }}
        uses: Synthesia-Technologies/gha-workflows/actions/rnd/push-python-package@main
        with:
          arn-role: ${{ inputs.arn-role }}

      - name: Set package name as output
        if: ${{ github.ref != 'refs/heads/main' }}
        run: |
          PKG_NAME=$(sed -n 's/^name = "\(.*\)"/\1/p' pyproject.toml | head -n 1 || echo "unable-to-parse-package-name")
          echo "PUSH_PYTHON_PACKAGE_NAME=$PKG_NAME" >> $GITHUB_ENV

      - name: Create a comment with package version
        if: ${{ github.ref != 'refs/heads/main' }}
        uses: Synthesia-Technologies/gha-workflows/actions/pr-comment-overwrite@main
        with:
          content: "‚§¥Ô∏èüíª‚òÅ Dev Python Package Published **${{ env.PUSH_PYTHON_PACKAGE_NAME }}==${{ steps.resolve-version.outputs.dev-version }}**"
          footer: Generated by Github Actions

      # NEVER REMOVE THIS STEP!
      - name: Commit non-dev version to repo
        if: ${{ github.ref != 'refs/heads/main' && env.DYNAMIC_VERSIONING !='1' }}
        uses: Synthesia-Technologies/gha-workflows/actions/rnd/bump-pyproject-version@main
        with:
          new-version: ${{ steps.resolve-version.outputs.base-version }}
